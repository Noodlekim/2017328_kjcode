제네릭 실습


// Swift 잠깐 놀다 가기~♫

// 일시/ 장소: 2017.3.25/ 아키하바라~♪

/* 목차
 1. 제너릭스(Generics)이란
 2. 간단 실습
 3. 번외: Array에 대해서 (feat 재은형)

 ------------------- 시간 되면 ------------------
 4. Swift3부터 생긴 argument 표기법 도대체 어떻게 하라고?
 5. Array 사용시 팁! map, flatMap을 활용해 소스코드를 좀 더 간단하게 짜기.(있어보이기)
 ----------------------------------------------

 6. 질의. 부제: 아는건 알랴주고 모르는건 못 알랴줌.
 */


/*
 참고
 - http://rhammer.tistory.com/121
 - https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Generics.html
 */

// -------------------------------------------------------------
// 1. 제네릭스(Generics)이란


// *공부하기전 전의 개념.*

// - 잘은 모르겠지만 <T>를 이용해서 형지정에서 좀 더 자유로워 질 수가 있는 듯.
// - func인 것 같은데 일반적인 func이랑 문법이 다름.
// - 굳이 사용을 안해도 크게 개발하는데 지장은 없어서 멀리하게 됨.


// *문서에 의거한 개념.*

// - 제너릭 코드를 사용하면 좀 더 유연하고 재사용률이 높은 함수를 만들 수 있다.
// - 코드 중복을 방지할 수 있고, 함수의 역할을 좀 더 명백히 전달 할 수 있다.


// -------------------------------------------------------------
// 2. 간단 실습

// *2-1 기본문법! 부제: <T>에 쫄지말자 *

// 기본형
func 펑션명<T>(a: T) { }

struct 봉봉<T> {
    var array = [T]()
}


func test<준준>(a: 준준) -> 준준 {
    return a
}

func test2<준준>(a: 준준) -> 준준 {
    return a
}

struct Struct<T, G, H> {
    var item: T?
    var item2: G?
    var item3: H?
}

func swap<Jun>(a: inout Jun, b: inout Jun) {
    let temp = a
    a = b
    b = temp
}

//test(a: "123")
// 결론: <T> 선언된 임시타입에 불과! 다양항 방식으로 정의가 될 수 있다.
￼
이 T 아님


// *2-2 응용1 옵션걸기 (Hashable Equatable Comparable)*
struct Stack<Jun: Equatable, KJCode> {

    var members = [KJCode]()
    private var items = [Jun]()
    mutating func stack(item: Jun) {
        self.items.append(item)
    }
    func itemCount() -> Int {
        return self.items.count
    }
    mutating func remove() {
        self.items.removeLast()
    }
}

var a = Stack<String, Any>.init()
a.stack(item: "123")
a.stack(item: "234")
a.stack(item: "789")
a.itemCount()
a.remove()
a.itemCount()

let b = Stack<Int, Any>.init()
a.members = [1, 2, 3, 4, "123", b]

func compareTest<Bong: Comparable>(a: Bong, b: Bong) -> Bool {
    return a == b
}

compareTest(a: 1, b: 2)
compareTest(a: 1, b: 1)


// *2-3 조건 걸기 (제너릭 프로토콜과 where 조건)*

// 제너릭 프로토콜은 associatedtype를 이용함. (굳이 필요는 없지만.. 제너릭 조건을 이용하기 위해선 써야하는 듯..)

protocol 빵만들기 {

    associatedtype breadType

    var breads: [breadType] { get }
    var totalCount: Int { get }
    func addBread(item: breadType)
}

struct 소보로빵 {

}

struct 크림빵 {

}

class breadCompany1: 빵만들기 {

    typealias breadType = 소보로빵
    var name: String
    var brand: String

    required init(name: String, brand: String) {
        self.name = name
        self.brand = brand
    }

    var breads =  [소보로빵]()
    var totalCount: Int = 0
    func addBread(item: 소보로빵) {
        self.breads.append(item)
    }
}

class breadCompany2: 빵만들기 {

    typealias breadType = 크림빵
    var name: String
    var brand: String
    var franchise: Bool

    required init(name: String, brand: String, isFranchise: Bool) {
        self.name = name
        self.brand = brand
        self.franchise = isFranchise
    }

    var breads =  [크림빵]()
    var totalCount: Int = 0
    func addBread(item: 크림빵) {
        self.breads.append(item)
    }

}

let 빵1 = breadCompany1.init(name: "빵이름1", brand: "동네빵집1")
let 빵2 = breadCompany2.init(name: "빵이름2", brand: "빠리빠게뜨", isFranchise: true)

// where를 이용해서 소로보빵은 기본적으로 안 받는 펑션
func eatBbang<T1: 빵만들기, T2: 빵만들기>(a: T1, b: T2) where T1.breadType == 소보로빵 {

    // 기본적으로 첫번째 빵이 소보로빵이 아니면 난 안먹고 싶을 때;

}

let c1 = breadCompany1.init(name: "", brand: "")
let c2 = breadCompany2.init(name: "", brand: "", isFranchise: true)
eatBbang(a: c1, b: c2)


// *3 번외: Swift의 Array에 대해서 (feat 재은형)*
let array = Array<Any>.init()

struct Arry<T> {

}

Dictionary<String, Any>.init()

struct Dic<KJ> {

}

let arry = Arry<Any>.init()
let dic = Dic<Any>.init()

// 실전 응용예

extension Array {

    mutating func removeValue<T: Equatable>(value: T) {
        var index: Int?
        for (i, v) in self.enumerated() {
            if let tempValue = v as? T {
                if tempValue == value {
                    index = i
                    break
                }
            }
        }

        if let index = index {
            self.remove(at: index)
        }
    }
}
